import string
import math
from fractions import gcd
import pigpio
GPIOxpul = 19
GPIOxdir = 26
GPIOypul = 16
GPIOydir = 20

convert = 1.0/60000000.0
microstep = 5.0
mmperrev = 70.0
pulseperrev = 200.0
mmperstep = mmperrev/(pulseperrev*microstep)

class Waves:
        def __init__(self):
                self.waves = [] #list of waves for given group
                self.maxf = 1 #max feedrate
                self.x = 0.0
                self.y = 0.0

        def addgc (self, gcline):
            splitgc = gcline.split(" ")
            for value in splitgc:
                if "G" in value:
                    cmd = int(self.toNum(value))
                if "X" in value:
                    xpos = self.toNum(value)
                if "Y" in value:
                    ypos = self.toNum(value)
                if "A" in value:
                    ampl = self.toNum(value)
                if "T" in value:
                    peri = self.toNum(value)
                if "D" in value:
                    distance = self.toNum(value)
                if "F" in value:
                    feedrate = self.toNum(value)

            #to add: error checking

            if cmd is 0:
                feedrate = self.maxf
            if cmd is 0 or cmd is 1:
                self.generatelinear(xpos, ypos, feedrate)
            if cmd is 83:
                self.generatesine(ampl, peri, distance, feedrate)

        def generatelinear(self, xpos, ypos, feedrate):
            pinon = 0
            pinoff = 0

            #set direction
            if (xpos < self.x):
                pinon = pinon + (1<<GPIOxdir)
            else:
                pinoff = pinoff + (1<<GPIOxdir)
            if (ypos < self.y):
                pinon = pinon + (1<<GPIOydir)
            else:
                pinoff = pinoff + (1<<GPIOydir)
            F = feedrate * convert

            #change to separate y and x pulse sizes
            dely = ypos - self.y
            delx = xpos - self.x

            theta = math.atan2(dely, delx)
            vy = abs(F*math.sin(theta))
            vx = abs(F*math.cos(theta))

            usperstepy = round(mmperstep / vy)
            usperstepx = round(mmperstep / vx)

            print("usperstes:")
            print(vx)
            print(usperstepx)


            if (xpos != self.x and ypos != self.y):
                interp = gcd(usperstepx, usperstepy)
            else:
                interp = max(usperstepx, usperstepy)

            interp = int(interp)
            totaltime = int(round((math.sqrt(dely*dely + delx*delx) / F)))
            print("Time:")
            print(totaltime)
            print(interp)

            linear = []
            for t in range(0, totaltime, interp):
                if (t % usperstepy is 0 and usperstepy > 0):
                    pinon = pinon + 1 << GPIOypul
                else:
                    pinoff = pinoff + 1 << GPIOxpul
                if (t % usperstepx is 0 and usperstepx > 0):
                    pinon = pinon + 1 << GPIOypul
                else:
                    pinoff = pinoff + 1<<GPIOypul

                linear.append(pigpio.pulse(pinon, pinoff, interp))
                    
            self.waves.append(linear)
            
            

       #get integer from gcoude commaends
        def toNum(self, mystr):
            return float(mystr.strip(string.ascii_letters))

if __name__ == "__main__":
    waves = Waves()
    waves.addgc("G1 X5 Y5 F100")
